# -*- coding: utf-8 -*-
"""Allure - Timer

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1noLqeXK6PTY_24o2eSUQvkwxckXjmQCK
"""

import streamlit as st
import time
from datetime import datetime, timedelta

st.set_page_config(page_title="Tijdregistratie Financiële Sector", layout="centered")

st.title("📊 Tijdregistratie App")
st.markdown("Efficiënt, stijlvol en accuraat. Speciaal voor professionals in de financiële dienstverlening.")

# ─────────────────────────────────────────────────────────────
# INITIALISATIE VAN SESSIEVARIABELEN
# ─────────────────────────────────────────────────────────────
defaults = {
    "entries": {},
    "current_client": None,
    "current_task": "",
    "start_time": None,
    "paused": False,
    "pause_time": None,
    "accumulated_pause": timedelta(0),
    "stopped": False,
    "pending_client": None,
    "awaiting_description": False
}

for key, value in defaults.items():
    if key not in st.session_state:
        st.session_state[key] = value

# ─────────────────────────────────────────────────────────────
# FUNCTIES
# ─────────────────────────────────────────────────────────────
def start_timer(client_number, task_description):
    now = datetime.now()
    st.session_state.start_time = now
    st.session_state.accumulated_pause = timedelta(0)
    st.session_state.current_client = client_number
    st.session_state.current_task = task_description
    st.session_state.paused = False
    st.session_state.awaiting_description = False
    st.toast(f"Tijdregistratie gestart voor klant {client_number}")

def stop_timer():
    if st.session_state.start_time and not st.session_state.paused:
        end_time = datetime.now()
        duration = end_time - st.session_state.start_time - st.session_state.accumulated_pause
        minutes = int(duration.total_seconds() / 60)

        client = st.session_state.current_client
        task = st.session_state.current_task

        if client in st.session_state.entries:
            st.session_state.entries[client]["minutes"] += minutes
        else:
            st.session_state.entries[client] = {"task": task, "minutes": minutes}

        st.toast(f"Klant {client} afgerond: {minutes} minuten")

    # Reset
    st.session_state.start_time = None
    st.session_state.current_client = None
    st.session_state.current_task = ""
    st.session_state.accumulated_pause = timedelta(0)

def pause_timer():
    if not st.session_state.paused:
        st.session_state.paused = True
        st.session_state.pause_time = datetime.now()
        st.toast("⏸️ Pauze ingeschakeld")

def resume_timer():
    if st.session_state.paused:
        pause_duration = datetime.now() - st.session_state.pause_time
        st.session_state.accumulated_pause += pause_duration
        st.session_state.paused = False
        st.toast("▶️ Tijdregistratie hervat")

def handle_user_command(command):
    cmd = command.strip().lower()

    if cmd == "pauze":
        pause_timer()
    elif cmd == "werk":
        resume_timer()
    elif cmd == "stop":
        stop_timer()
        st.session_state.stopped = True
    elif cmd.isdigit():
        if st.session_state.start_time:
            stop_timer()
        st.session_state.pending_client = cmd
        st.session_state.awaiting_description = True
    else:
        st.warning("Ongeldig commando of klantnummer.")

# ─────────────────────────────────────────────────────────────
# UI – INVOER
# ─────────────────────────────────────────────────────────────

with st.expander("📝 Nieuwe invoer of commando"):
    user_input = st.text_input("Voer klantnummer in of typ 'pauze', 'werk' of 'stop':")
    if st.button("Verwerk"):
        if user_input:
            handle_user_command(user_input)

# Vraag omschrijving indien nodig
if st.session_state.awaiting_description:
    with st.form("task_form"):
        task = st.text_area(
            "Wat is de meest korte omschrijving van de werkzaamheden voor deze klant (max 40 woorden)?",
            max_chars=300
        )
        submitted = st.form_submit_button("Start tijdregistratie")
        if submitted and task:
            start_timer(st.session_state.pending_client, task)

# ─────────────────────────────────────────────────────────────
# TIMER-WEERGAVE
# ─────────────────────────────────────────────────────────────

if st.session_state.start_time and not st.session_state.paused:
    elapsed = datetime.now() - st.session_state.start_time - st.session_state.accumulated_pause
    st.info(f"🟢 Actieve klant: {st.session_state.current_client} | Tijd: {str(elapsed).split('.')[0]}")
elif st.session_state.paused:
    st.warning("⏸️ Timer gepauzeerd")

# ─────────────────────────────────────────────────────────────
# DAGOVERZICHT
# ─────────────────────────────────────────────────────────────

if st.session_state.stopped:
    st.subheader("📄 Dagoverzicht tijdregistratie")
    df_data = [
        {
            "Klantnummer": client,
            "Omschrijving": data["task"],
            "Tijd (minuten)": data["minutes"]
        }
        for client, data in st.session_state.entries.items()
    ]
    edited_df = st.data_editor(df_data, num_rows="dynamic", use_container_width=True, key="editor")
    st.success("Het overzicht kan handmatig worden aangepast voordat het wordt opgeslagen of geëxporteerd.")

# ─────────────────────────────────────────────────────────────
# FOOTER
# ─────────────────────────────────────────────────────────────

st.markdown("---")
st.caption("Ontwikkeld voor financiële professionals – met focus op eenvoud, nauwkeurigheid en klasse. © 2025")

#!pip install streamlit

